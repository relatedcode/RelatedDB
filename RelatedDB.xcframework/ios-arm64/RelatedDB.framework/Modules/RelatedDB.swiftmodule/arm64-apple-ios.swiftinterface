// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RelatedDB
import CryptoKit
import Foundation
@_exported import RelatedDB
import SQLite3
import Swift
import _Concurrency
@objc public protocol RDObject {
  @objc static func primaryKey() -> Swift.String
  @objc optional static func encryptedColumns() -> [Swift.String]
}
extension RelatedDB.RDObject {
  public static func table() -> Swift.String
  public func table() -> Swift.String
  public static func object() -> ObjectiveC.NSObject
}
extension RelatedDB.RDObject {
  public static func create(_ values: [Swift.String : Any]) -> Self
}
extension RelatedDB.RDObject {
  public func values(for names: [Swift.String]) -> [Swift.String : Any]
  public func values(except names: [Swift.String]) -> [Swift.String : Any]
  public func values() -> [Swift.String : Any]
}
extension RelatedDB.RDObject {
  public func export(for names: [Swift.String]) -> [Swift.String : Any]
  public func export(except names: [Swift.String]) -> [Swift.String : Any]
  public func export() -> [Swift.String : Any]
}
extension RelatedDB.RDObject {
  public func insert(_ db: RelatedDB.RDatabase)
  public func insertUpdate(_ db: RelatedDB.RDatabase)
}
extension RelatedDB.RDObject {
  public func update(_ db: RelatedDB.RDatabase)
  public func updateInsert(_ db: RelatedDB.RDatabase)
}
extension RelatedDB.RDObject {
  public static func updateOne(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], key: Any)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "")
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: RelatedDB.RDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension RelatedDB.RDObject {
  public func delete(_ db: RelatedDB.RDatabase)
  public static func deleteOne(_ db: RelatedDB.RDatabase, key: Any)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "")
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension RelatedDB.RDObject {
  public static func fetchOne(_ db: RelatedDB.RDatabase, key: Any) -> Self?
  public static func fetchOne(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "") -> Self?
  public static func fetchOne(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> Self?
  public static func fetchOne(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> Self?
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
}
extension RelatedDB.RDObject {
  public static func check(_ db: RelatedDB.RDatabase, key: Any) -> Swift.Bool
  public static func check(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "") -> Swift.Bool
  public static func check(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Bool
  public static func check(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Bool
}
extension RelatedDB.RDObject {
  public static func count(_ db: RelatedDB.RDatabase, _ condition: Swift.String = "") -> Swift.Int
  public static func count(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Int
  public static func count(_ db: RelatedDB.RDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Int
}
extension RelatedDB.RDObject {
  @discardableResult
  public static func createObserver(_ db: RelatedDB.RDatabase, _ type: RelatedDB.RDObserverType, _ condition: Swift.String = "", callback: @escaping RelatedDB.RDObserverCallback) -> Swift.String
  @discardableResult
  public static func createObserver(_ db: RelatedDB.RDatabase, _ types: [RelatedDB.RDObserverType], _ condition: Swift.String = "", callback: @escaping RelatedDB.RDObserverCallback) -> Swift.String
  public static func removeObserver(_ db: RelatedDB.RDatabase, _ observerId: Swift.String?)
  public static func removeObserver(_ db: RelatedDB.RDatabase, _ observerId: Swift.String)
}
public enum RDObserverType {
  case insert
  case update
  case delete
  public static func == (a: RelatedDB.RDObserverType, b: RelatedDB.RDObserverType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias RDObserverCallback = (Swift.String, Any) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class RDatabase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(file: Swift.String)
  public init(path: Swift.String)
  @objc deinit
}
extension RelatedDB.RDatabase {
  public func cleanupDatabase()
  public func createTable(_ table: Swift.String)
  public func dropTable(_ table: Swift.String)
}
extension RelatedDB.RDatabase {
  public func execute(_ sql: Swift.String)
  public func execute(_ sql: Swift.String, _ arguments: [Any])
  public func execute(_ sql: Swift.String, _ arguments: [Swift.String : Any])
}
extension RelatedDB.RDatabase {
  public func export(_ table: Swift.String, _ values: [Swift.String : Any]) -> [Swift.String : Any]
}
extension RelatedDB.RDatabase {
  public func insert(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func insert(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension RelatedDB.RDatabase {
  public func update(_ table: Swift.String, _ values: [Swift.String : Any])
  public func update(_ table: Swift.String, _ array: [[Swift.String : Any]], _ completion: @escaping () -> Swift.Void = {})
}
extension RelatedDB.RDatabase {
  public func insertUpdate(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func insertUpdate(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension RelatedDB.RDatabase {
  public func updateInsert(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func updateInsert(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension RelatedDB.RDatabase {
  public func updateOne(_ table: Swift.String, _ values: [Swift.String : Any], key: Any)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension RelatedDB.RDatabase {
  public func deleteOne(_ table: Swift.String, key: Any)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension RelatedDB.RDatabase {
  public func fetchOne(_ table: Swift.String, key: Any) -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
}
extension RelatedDB.RDatabase {
  public func check(_ table: Swift.String, key: Any) -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String = "") -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Bool
}
extension RelatedDB.RDatabase {
  public func count(_ table: Swift.String, _ condition: Swift.String = "") -> Swift.Int
  public func count(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Int
  public func count(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RDLogger : ObjectiveC.NSObject {
  public class func key(_ value: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RDDate : ObjectiveC.NSObject {
  public class func custom(_ formatter: Foundation.DateFormatter)
  @objc deinit
}
extension RelatedDB.RDDate {
  public class subscript(string: Swift.String) -> Foundation.Date {
    get
  }
  public class subscript(date: Foundation.Date) -> Swift.String {
    get
  }
  public class subscript(timestamp: Foundation.TimeInterval) -> Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RDCryptor : ObjectiveC.NSObject {
  public class func password(_ value: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public enum RDDebugLevel {
  case none
  case error
  case all
  public static func == (a: RelatedDB.RDDebugLevel, b: RelatedDB.RDDebugLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RDDebug : ObjectiveC.NSObject {
  public class func level(_ debugLevel: RelatedDB.RDDebugLevel)
  @objc override dynamic public init()
  @objc deinit
}
extension RelatedDB.RDObserverType : Swift.Equatable {}
extension RelatedDB.RDObserverType : Swift.Hashable {}
extension RelatedDB.RDDebugLevel : Swift.Equatable {}
extension RelatedDB.RDDebugLevel : Swift.Hashable {}
